/**
 * Utility functions for generating PDF documents
 * 
 * Note: In a production environment, you would use a library like jsPDF,
 * PDFKit, or react-pdf for client-side PDF generation, or a server-side
 * solution for more complex documents.
 */

import { Document, DocumentSection } from '../types/Documents';

/**
 * Generate a PDF from a document
 * @param document Document to convert to PDF
 * @returns Promise with PDF blob
 */
export const generatePDF = async (document: Document): Promise<Blob> => {
  try {
    // This is a simplified implementation
    // In a real app, you'd use a proper PDF generation library
    
    // For demonstration purposes, we'll create a simple text representation
    const content = generateTextContent(document);
    
    // In a real implementation, you would convert this to a PDF
    // For now, we'll just return a text blob
    return new Blob([content], { type: 'application/pdf' });
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
};

/**
 * Generate text content from document
 * @param document Document to convert
 * @returns Text content
 */
const generateTextContent = (document: Document): string => {
  let content = `${document.title}\n`;
  content += `${document.content.metadata.company_name} | ${document.content.metadata.industry} | ${document.content.metadata.stage}\n\n`;
  
  document.content.sections.forEach(section => {
    content += `# ${section.title}\n\n`;
    
    // Strip HTML tags for plain text
    const plainContent = section.content.replace(/<[^>]*>?/gm, '');
    content += `${plainContent}\n\n`;
    
    if (section.subsections) {
      section.subsections.forEach(subsection => {
        content += `## ${subsection.title}\n\n`;
        const plainSubContent = subsection.content.replace(/<[^>]*>?/gm, '');
        content += `${plainSubContent}\n\n`;
      });
    }
  });
  
  return content;
};

/**
 * Generate HTML content from document (for HTML export)
 * @param document Document to convert
 * @returns HTML content
 */
export const generateHTML = (document: Document): string => {
  let html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${document.title}</title>
      <style>
        body {
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          line-height: 1.6;
          color: #1F2937;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        h1 {
          color: #2A2F6D;
          border-bottom: 2px solid #F9B94E;
          padding-bottom: 10px;
        }
        h2 {
          color: #2A2F6D;
          margin-top: 30px;
        }
        .section {
          margin-bottom: 30px;
        }
        .metadata {
          color: #6B7280;
          font-size: 14px;
          margin-bottom: 20px;
        }
        .footer {
          margin-top: 50px;
          padding-top: 20px;
          border-top: 1px solid #E5E7EB;
          font-size: 12px;
          color: #6B7280;
          text-align: center;
        }
      </style>
    </head>
    <body>
      <h1>${document.title}</h1>
      <div class="metadata">
        <strong>Company:</strong> ${document.content.metadata.company_name} | 
        <strong>Industry:</strong> ${document.content.metadata.industry} | 
        <strong>Stage:</strong> ${document.content.metadata.stage}
      </div>
  `;
  
  document.content.sections.forEach(section => {
    html += `
      <div class="section">
        <h2>${section.title}</h2>
        <div>${section.content}</div>
      </div>
    `;
    
    if (section.subsections) {
      section.subsections.forEach(subsection => {
        html += `
          <div class="subsection">
            <h3>${subsection.title}</h3>
            <div>${subsection.content}</div>
          </div>
        `;
      });
    }
  });
  
  html += `
      <div class="footer">
        Generated by Abiah.help | ${new Date().toLocaleDateString()}
      </div>
    </body>
    </html>
  `;
  
  return html;
};

/**
 * Generate DOCX content from document (for DOCX export)
 * @param document Document to convert
 * @returns DOCX content as blob
 */
export const generateDOCX = async (document: Document): Promise<Blob> => {
  // This is a simplified implementation
  // In a real app, you'd use a library like docx.js
  
  // For demonstration purposes, we'll create a simple text representation
  const content = generateTextContent(document);
  
  // In a real implementation, you would convert this to a DOCX
  // For now, we'll just return a text blob
  return new Blob([content], { 
    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
  });
};