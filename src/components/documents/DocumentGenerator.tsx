import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { FileText, Presentation as PresentationChart, BarChart3, TrendingUp, FileDigit, ArrowRight, Check, Loader2 } from 'lucide-react';
import { Document, DocumentContent } from '../../types/Documents';
import { Button } from '../ui/Button-bkp';
import { Input } from '../ui/Input-bkp';
import { Card, CardContent } from '../ui/Card';

interface DocumentGeneratorProps {
  onDocumentGenerated: (document: Document) => void;
}

export function DocumentGenerator({ onDocumentGenerated }: DocumentGeneratorProps) {
  const [step, setStep] = useState(1);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  
  // Form state
  const [documentType, setDocumentType] = useState<string>('');
  const [formData, setFormData] = useState({
    title: '',
    companyName: '',
    industry: '',
    stage: '',
    targetAudience: '',
    description: '',
  });

  const documentTypes = [
    {
      id: 'business_plan',
      title: 'Business Plan', 
      description: 'Comprehensive business plan with executive summary, market analysis, and financial projections',
      icon: FileText,
      color: 'bg-blue-100 text-blue-600',
    },
    {
      id: 'pitch_deck',
      title: 'Pitch Deck',
      description: 'Investor-ready presentation slides for funding pitches',
      icon: PresentationChart,
      color: 'bg-green-100 text-green-600',
    },
    {
      id: 'executive_summary',
      title: 'Executive Summary',
      description: 'Concise overview of your business plan for quick review', 
      icon: FileDigit,
      color: 'bg-purple-100 text-purple-600',
    },
    {
      id: 'market_analysis',
      title: 'Market Analysis',
      description: 'Detailed analysis of your target market, competition, and opportunity', 
      icon: TrendingUp,
      color: 'bg-orange-100 text-orange-600',
    },
    {
      id: 'financial_projections',
      title: 'Financial Projections',
      description: 'Financial forecasts, unit economics, and funding requirements', 
      icon: BarChart3,
      color: 'bg-red-100 text-red-600',
    },
  ];

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsGenerating(true);
    
    // Simulate document generation with progress updates
    for (let i = 0; i <= 100; i += 10) {
      setGenerationProgress(i);
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // Create mock document
    const newDocument: Document = {
      id: `doc-${Date.now()}`,
      user_id: 'bachtiare@gmail.com',
      title: formData.title,
      type: documentType as any,
      status: 'completed',
      content: generateMockContent(documentType, formData),
      progress_data: {
        completed_sections: [],
        completion_percentage: 0,
        time_spent: 0,
        last_updated: new Date().toISOString(),
      },
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    setIsGenerating(false);
    onDocumentGenerated(newDocument);
  };

  const generateMockContent = (type: string, data: any): DocumentContent => {
    // This would be replaced with actual AI-generated content
    const sections = [];
    
    if (type === 'business_plan') {
      sections.push(
        {
          id: 'exec-summary',
          title: 'Executive Summary',
          content: `<p>${data.companyName} is an innovative company in the ${data.industry} industry. We are currently at the ${data.stage} stage and targeting ${data.targetAudience}.</p><p>${data.description}</p>`,
          order: 1,
          type: 'text'
        },
        {
          id: 'market-analysis',
          title: 'Market Analysis',
          content: '<p>Detailed market analysis would appear here, generated by AI based on the industry and target audience information provided.</p>',
          order: 2,
          type: 'text'
        },
        {
          id: 'competitive-landscape',
          title: 'Competitive Landscape',
          content: '<p>Analysis of key competitors in the market, with strengths and weaknesses compared to your offering.</p>',
          order: 3,
          type: 'text'
        },
        {
          id: 'business-model',
          title: 'Business Model',
          content: '<p>Detailed explanation of the business model, revenue streams, and pricing strategy.</p>',
          order: 4,
          type: 'text'
        },
        {
          id: 'financial-projections',
          title: 'Financial Projections',
          content: '<p>5-year financial projections including revenue, expenses, and key metrics.</p>',
          order: 5,
          type: 'text'
        }
      );
    } else if (type === 'pitch_deck') {
      sections.push(
        {
          id: 'title-slide',
          title: 'Title Slide',
          content: `<h1>${data.companyName}</h1><p>${data.description}</p>`,
          order: 1,
          type: 'text'
        },
        {
          id: 'problem',
          title: 'The Problem',
          content: '<p>Clear articulation of the problem your company solves.</p>',
          order: 2,
          type: 'text'
        }
      );
    } else {
      sections.push(
        {
          id: 'section-1',
          title: 'Section 1',
          content: `<p>Content for ${data.companyName} in the ${data.industry} industry.</p>`,
          order: 1,
          type: 'text'
        },
        {
          id: 'section-2',
          title: 'Section 2',
          content: '<p>Additional content would be generated here.</p>',
          order: 2,
          type: 'text'
        }
      );
    }
    
    return {
      sections,
      metadata: {
        company_name: data.companyName,
        industry: data.industry,
        stage: data.stage,
        target_audience: data.targetAudience,
        total_sections: sections.length
      }
    };
  };

  return (
    <div className="max-w-3xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        className="text-center mb-8"
      >
        <h1 className="text-3xl md:text-4xl font-bold text-primary mb-4">
          Generate New Document
        </h1>
        <p className="text-text-secondary text-lg">
          Our AI will create a professional document tailored to your business
        </p>
      </motion.div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          {['Document Type', 'Business Details', 'Generate'].map((label, index) => {
            const stepNum = index + 1;
            const isActive = step === stepNum;
            const isCompleted = step > stepNum;
            
            return (
              <div key={label} className="flex-1 text-center">
                <div className={`w-10 h-10 rounded-full flex items-center justify-center mx-auto mb-2 ${
                  isActive ? 'bg-primary text-white' :
                  isCompleted ? 'bg-success text-white' :
                  'bg-neutral-200 text-text-secondary'
                }`}>
                  {isCompleted ? (
                    <Check className="w-5 h-5" />
                  ) : (
                    <span>{stepNum}</span>
                  )}
                </div>
                <div className={`text-sm ${
                  isActive || isCompleted ? 'text-primary font-medium' : 'text-text-secondary'
                }`}>
                  {label}
                </div>
              </div>
            );
          })}
        </div>
        <div className="relative mt-2">
          <div className="absolute top-0 left-0 right-0 h-1 bg-neutral-200 rounded-full" />
          <div 
            className="absolute top-0 left-0 h-1 bg-primary rounded-full transition-all duration-500"
            style={{ width: `${((step - 1) / 2) * 100}%` }}
          />
        </div>
      </div>

      {/* Step 1: Document Type Selection */}
      {step === 1 && (
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="text-xl font-semibold text-primary mb-6">Select Document Type</h2>
          
          <div className="grid md:grid-cols-2 gap-4 mb-8">
            {documentTypes.map((type) => {
              const IconComponent = type.icon;
              const isSelected = documentType === type.id;
              
              return (
                <Card 
                  key={type.id}
                  className={`cursor-pointer transition-all duration-300 ${
                    isSelected 
                      ? 'border-primary ring-2 ring-primary/20' 
                      : 'hover:border-primary/50'
                  }`}
                  onClick={() => setDocumentType(type.id)}
                >
                  <CardContent className="p-6">
                    <div className="flex items-start">
                      <div className={`w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0 ${type.color}`}>
                        <IconComponent className="w-6 h-6" />
                      </div>
                      <div className="ml-4">
                        <h3 className="font-semibold text-primary mb-1">{type.title}</h3>
                        <p className="text-sm text-text-secondary">{type.description}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
          
          <div className="flex justify-end">
            <Button
              onClick={() => setStep(2)}
              disabled={!documentType}
              className="group"
            >
              Continue
              <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
            </Button>
          </div>
        </motion.div>
      )}

      {/* Step 2: Business Details */}
      {step === 2 && (
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="text-xl font-semibold text-primary mb-6">Enter Business Details</h2>
          
          <form onSubmit={(e) => { e.preventDefault(); setStep(3); }} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <Input
                label="Document Title"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                placeholder="e.g., TechFlow Business Plan"
                required
              />
              
              <Input
                label="Company Name"
                name="companyName"
                value={formData.companyName}
                onChange={handleInputChange}
                placeholder="e.g., TechFlow Inc."
                required
              />
            </div>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1.5">
                  Industry
                </label>
                <select
                  name="industry"
                  value={formData.industry}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border rounded-lg text-sm transition-colors border-neutral-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  required
                >
                  <option value="">Select Industry</option>
                  <option value="SaaS">SaaS</option>
                  <option value="FinTech">FinTech</option>
                  <option value="HealthTech">HealthTech</option>
                  <option value="E-commerce">E-commerce</option>
                  <option value="Marketplace">Marketplace</option>
                  <option value="Consumer App">Consumer App</option>
                  <option value="Enterprise Software">Enterprise Software</option>
                  <option value="AI/ML">AI/ML</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1.5">
                  Company Stage
                </label>
                <select
                  name="stage"
                  value={formData.stage}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border rounded-lg text-sm transition-colors border-neutral-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  required
                >
                  <option value="">Select Stage</option>
                  <option value="Pre-seed">Pre-seed</option>
                  <option value="Seed">Seed</option>
                  <option value="Series A">Series A</option>
                  <option value="Series B">Series B</option>
                  <option value="Series C+">Series C+</option>
                  <option value="Profitable">Profitable</option>
                </select>
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-text-primary mb-1.5">
                Target Audience
              </label>
              <select
                name="targetAudience"
                value={formData.targetAudience}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border rounded-lg text-sm transition-colors border-neutral-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="">Select Target Audience</option>
                <option value="Investors">Investors</option>
                <option value="Partners">Partners</option>
                <option value="Team Members">Team Members</option>
                <option value="Customers">Customers</option>
                <option value="Advisors">Advisors</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-text-primary mb-1.5">
                Brief Description
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="Briefly describe your business and what makes it unique..."
                className="w-full px-3 py-2 border rounded-lg text-sm transition-colors border-neutral-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent h-32 resize-none"
                required
              />
            </div>
            
            <div className="flex justify-between">
              <Button
                type="button"
                variant="ghost"
                onClick={() => setStep(1)}
              >
                Back
              </Button>
              
              <Button
                type="submit"
                disabled={!formData.title || !formData.companyName || !formData.industry || !formData.stage}
                className="group"
              >
                Continue
                <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
              </Button>
            </div>
          </form>
        </motion.div>
      )}

      {/* Step 3: Generate Document */}
      {step === 3 && (
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.5 }}
          className="text-center"
        >
          <h2 className="text-xl font-semibold text-primary mb-6">Generate Your Document</h2>
          
          <Card className="mb-8">
            <CardContent className="p-6">
              <h3 className="font-semibold text-primary mb-4">Document Summary</h3>
              
              <div className="grid md:grid-cols-2 gap-4 text-left">
                <div>
                  <div className="text-sm text-text-secondary mb-1">Document Type</div>
                  <div className="font-medium">{documentTypes.find(t => t.id === documentType)?.title}</div>
                </div>
                
                <div>
                  <div className="text-sm text-text-secondary mb-1">Title</div>
                  <div className="font-medium">{formData.title}</div>
                </div>
                
                <div>
                  <div className="text-sm text-text-secondary mb-1">Company</div>
                  <div className="font-medium">{formData.companyName}</div>
                </div>
                
                <div>
                  <div className="text-sm text-text-secondary mb-1">Industry</div>
                  <div className="font-medium">{formData.industry}</div>
                </div>
                
                <div>
                  <div className="text-sm text-text-secondary mb-1">Stage</div>
                  <div className="font-medium">{formData.stage}</div>
                </div>
                
                <div>
                  <div className="text-sm text-text-secondary mb-1">Target Audience</div>
                  <div className="font-medium">{formData.targetAudience || 'Not specified'}</div>
                </div>
              </div>
              
              {formData.description && (
                <div className="mt-4 text-left">
                  <div className="text-sm text-text-secondary mb-1">Description</div>
                  <div className="text-sm bg-neutral-50 p-3 rounded-lg border border-neutral-200">
                    {formData.description}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
          
          {isGenerating ? (
            <div className="text-center">
              <div className="w-20 h-20 mx-auto mb-6 relative">
                <Loader2 className="w-20 h-20 text-primary animate-spin" />
                <div className="absolute inset-0 flex items-center justify-center font-bold text-primary">
                  {generationProgress}%
                </div>
              </div>
              
              <h3 className="text-xl font-semibold text-primary mb-2">
                Generating Your Document
              </h3>
              
              <p className="text-text-secondary mb-6">
                Our AI is creating your {documentTypes.find(t => t.id === documentType)?.title.toLowerCase()}. This may take a minute...
              </p>
              
              <div className="max-w-md mx-auto">
                <div className="bg-neutral-200 rounded-full h-3 mb-2">
                  <div 
                    className="bg-primary rounded-full h-3 transition-all duration-300"
                    style={{ width: `${generationProgress}%` }}
                  />
                </div>
                
                <div className="text-sm text-text-secondary">
                  {generationProgress < 30 && 'Analyzing your business details...'}
                  {generationProgress >= 30 && generationProgress < 60 && 'Creating document structure...'}
                  {generationProgress >= 60 && generationProgress < 90 && 'Generating content...'}
                  {generationProgress >= 90 && 'Finalizing your document...'}
                </div>
              </div>
            </div>
          ) : (
            <div className="flex flex-col items-center">
              <Button
                onClick={handleSubmit}
                size="lg"
                className="group mb-4"
              >
                Generate Document
                <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
              </Button>
              
              <Button
                type="button"
                variant="ghost"
                onClick={() => setStep(2)}
              >
                Back to Edit Details
              </Button>
            </div>
          )}
        </motion.div>
      )}
    </div>
  );
}