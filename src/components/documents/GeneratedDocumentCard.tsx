import React from 'react';
import { motion } from 'framer-motion';
import { FileText, PresentationChart, BarChart3, TrendingUp, Calendar, Download, Share2, RefreshCw, Eye } from 'lucide-react';
import { GeneratedDocument } from '../../types/Documents';
import { Button } from '../ui/Button-bkp';
import { Card } from '../ui/Card';
import { formatDate } from '../../lib/utils';

interface GeneratedDocumentCardProps {
  document: GeneratedDocument;
  onView: (document: GeneratedDocument) => void;
  onRegenerate?: (document: GeneratedDocument) => void;
  onDownload?: (document: GeneratedDocument) => void;
  onShare?: (document: GeneratedDocument) => void;
  className?: string;
}

export function GeneratedDocumentCard({
  document,
  onView,
  onRegenerate,
  onDownload,
  onShare,
  className
}: GeneratedDocumentCardProps) {
  // Get document icon based on type
  const getDocumentIcon = () => {
    switch (document.document_type) {
      case 'pitch_deck':
        return PresentationChart;
      case 'business_plan':
        return FileText;
      case 'market_analysis':
        return TrendingUp;
      case 'consultation_summary':
        return Calendar;
      default:
        return FileText;
    }
  };

  // Get document type label
  const getDocumentTypeLabel = () => {
    switch (document.document_type) {
      case 'pitch_deck':
        return 'Pitch Deck';
      case 'business_plan':
        return 'Business Plan';
      case 'market_analysis':
        return 'Market Analysis';
      case 'consultation_summary':
        return 'Consultation Summary';
      default:
        return 'Document';
    }
  };

  // Get document color based on type
  const getDocumentColor = () => {
    switch (document.document_type) {
      case 'pitch_deck':
        return 'bg-green-100 text-green-600';
      case 'business_plan':
        return 'bg-blue-100 text-blue-600';
      case 'market_analysis':
        return 'bg-orange-100 text-orange-600';
      case 'consultation_summary':
        return 'bg-purple-100 text-purple-600';
      default:
        return 'bg-neutral-100 text-neutral-600';
    }
  };

  // Get section count from content
  const getSectionCount = () => {
    if (document.document_type === 'pitch_deck' && document.content.slides) {
      return document.content.slides.length;
    } else if (document.content.sections) {
      return document.content.sections.length;
    }
    return 0;
  };

  const IconComponent = getDocumentIcon();
  const documentColor = getDocumentColor();
  const documentTypeLabel = getDocumentTypeLabel();
  const sectionCount = getSectionCount();
  const generatedDate = formatDate(document.created_at);
  const modelName = document.metadata.model || 'AI';

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className={className}
    >
      <Card className="h-full flex flex-col hover:shadow-md transition-shadow">
        <div className="p-4 border-b border-neutral-200">
          <div className="flex items-start justify-between">
            <div className="flex items-center">
              <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${documentColor}`}>
                <IconComponent className="w-5 h-5" />
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-semibold text-primary">{document.title}</h3>
                <div className="text-xs text-text-secondary mt-1">
                  {documentTypeLabel} â€¢ Generated by {modelName}
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="p-4 flex-1 flex flex-col">
          <div className="text-sm text-text-secondary mb-4">
            <div className="flex items-center justify-between mb-1">
              <span>Generated:</span>
              <span className="font-medium text-text-primary">{generatedDate}</span>
            </div>
            <div className="flex items-center justify-between mb-1">
              <span>Sections:</span>
              <span className="font-medium text-text-primary">{sectionCount}</span>
            </div>
            {document.metadata.generation_parameters?.company_name && (
              <div className="flex items-center justify-between mb-1">
                <span>Company:</span>
                <span className="font-medium text-text-primary">
                  {document.metadata.generation_parameters.company_name || 
                   document.metadata.generation_parameters.business_name}
                </span>
              </div>
            )}
            {document.metadata.generation_parameters?.industry && (
              <div className="flex items-center justify-between mb-1">
                <span>Industry:</span>
                <span className="font-medium text-text-primary">
                  {document.metadata.generation_parameters.industry}
                </span>
              </div>
            )}
          </div>
          
          {/* Generation badge */}
          <div className="mb-4">
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary">
              <span className="w-2 h-2 bg-primary rounded-full mr-1.5"></span>
              AI Generated
            </span>
          </div>
          
          {/* Actions */}
          <div className="mt-auto pt-4 border-t border-neutral-200 flex items-center justify-between">
            <Button
              variant="primary"
              size="sm"
              onClick={() => onView(document)}
            >
              <Eye className="w-4 h-4 mr-2" />
              View
            </Button>
            
            <div className="flex items-center gap-2">
              {onRegenerate && (
                <button 
                  className="p-2 hover:bg-neutral-100 rounded-lg transition-colors"
                  onClick={() => onRegenerate(document)}
                  title="Regenerate document"
                >
                  <RefreshCw className="w-4 h-4 text-text-secondary" />
                </button>
              )}
              
              {onDownload && (
                <button 
                  className="p-2 hover:bg-neutral-100 rounded-lg transition-colors"
                  onClick={() => onDownload(document)}
                  title="Download document"
                >
                  <Download className="w-4 h-4 text-text-secondary" />
                </button>
              )}
              
              {onShare && (
                <button 
                  className="p-2 hover:bg-neutral-100 rounded-lg transition-colors"
                  onClick={() => onShare(document)}
                  title="Share document"
                >
                  <Share2 className="w-4 h-4 text-text-secondary" />
                </button>
              )}
            </div>
          </div>
        </div>
      </Card>
    </motion.div>
  );
}